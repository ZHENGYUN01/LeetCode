int TreeDepth(TreeNode* pRoot)
    {
        if(pRoot==NULL)
            return 0;
        if(pRoot->left==NULL&&pRoot->right==NULL)
            return 1;
        int temp=(TreeDepth(pRoot->left)>TreeDepth(pRoot->right))?TreeDepth(pRoot->left):TreeDepth(pRoot->right);
    	return temp+1;
    }
    
    bool IsBalanced_Solution(TreeNode* pRoot) {
		if(pRoot==NULL)
            return true;
        
        int lefttreelength=TreeDepth(pRoot->left);
        int righttreelength=TreeDepth(pRoot->right);
		
        if(abs(lefttreelength-righttreelength)>1)
            return false;
        return(IsBalanced_Solution(pRoot->left)&&IsBalanced_Solution(pRoot->right));
    }
    

